// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	apiv1alpha1 "github.com/kgateway-dev/kgateway/v2/api/v1alpha1"
)

// LoadBalancerConfigApplyConfiguration represents a declarative configuration of the LoadBalancerConfig type for use
// with apply.
type LoadBalancerConfigApplyConfiguration struct {
	HealthyPanicThreshold           *uint32                                           `json:"healthyPanicThreshold,omitempty"`
	UpdateMergeWindow               *v1.Duration                                      `json:"updateMergeWindow,omitempty"`
	LeastRequest                    *LoadBalancerLeastRequestConfigApplyConfiguration `json:"leastRequest,omitempty"`
	RoundRobin                      *LoadBalancerRoundRobinConfigApplyConfiguration   `json:"roundRobin,omitempty"`
	RingHash                        *LoadBalancerRingHashConfigApplyConfiguration     `json:"ringHash,omitempty"`
	Maglev                          *apiv1alpha1.LoadBalancerMaglevConfig             `json:"maglev,omitempty"`
	Random                          *apiv1alpha1.LoadBalancerRandomConfig             `json:"random,omitempty"`
	LocalityConfigType              *apiv1alpha1.LocalityConfigType                   `json:"localityConfigType,omitempty"`
	UseHostnameForHashing           *bool                                             `json:"useHostnameForHashing,omitempty"`
	CloseConnectionsOnHostSetChange *bool                                             `json:"closeConnectionsOnHostSetChange,omitempty"`
}

// LoadBalancerConfigApplyConfiguration constructs a declarative configuration of the LoadBalancerConfig type for use with
// apply.
func LoadBalancerConfig() *LoadBalancerConfigApplyConfiguration {
	return &LoadBalancerConfigApplyConfiguration{}
}

// WithHealthyPanicThreshold sets the HealthyPanicThreshold field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HealthyPanicThreshold field is set to the value of the last call.
func (b *LoadBalancerConfigApplyConfiguration) WithHealthyPanicThreshold(value uint32) *LoadBalancerConfigApplyConfiguration {
	b.HealthyPanicThreshold = &value
	return b
}

// WithUpdateMergeWindow sets the UpdateMergeWindow field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UpdateMergeWindow field is set to the value of the last call.
func (b *LoadBalancerConfigApplyConfiguration) WithUpdateMergeWindow(value v1.Duration) *LoadBalancerConfigApplyConfiguration {
	b.UpdateMergeWindow = &value
	return b
}

// WithLeastRequest sets the LeastRequest field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LeastRequest field is set to the value of the last call.
func (b *LoadBalancerConfigApplyConfiguration) WithLeastRequest(value *LoadBalancerLeastRequestConfigApplyConfiguration) *LoadBalancerConfigApplyConfiguration {
	b.LeastRequest = value
	return b
}

// WithRoundRobin sets the RoundRobin field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RoundRobin field is set to the value of the last call.
func (b *LoadBalancerConfigApplyConfiguration) WithRoundRobin(value *LoadBalancerRoundRobinConfigApplyConfiguration) *LoadBalancerConfigApplyConfiguration {
	b.RoundRobin = value
	return b
}

// WithRingHash sets the RingHash field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RingHash field is set to the value of the last call.
func (b *LoadBalancerConfigApplyConfiguration) WithRingHash(value *LoadBalancerRingHashConfigApplyConfiguration) *LoadBalancerConfigApplyConfiguration {
	b.RingHash = value
	return b
}

// WithMaglev sets the Maglev field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Maglev field is set to the value of the last call.
func (b *LoadBalancerConfigApplyConfiguration) WithMaglev(value apiv1alpha1.LoadBalancerMaglevConfig) *LoadBalancerConfigApplyConfiguration {
	b.Maglev = &value
	return b
}

// WithRandom sets the Random field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Random field is set to the value of the last call.
func (b *LoadBalancerConfigApplyConfiguration) WithRandom(value apiv1alpha1.LoadBalancerRandomConfig) *LoadBalancerConfigApplyConfiguration {
	b.Random = &value
	return b
}

// WithLocalityConfigType sets the LocalityConfigType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LocalityConfigType field is set to the value of the last call.
func (b *LoadBalancerConfigApplyConfiguration) WithLocalityConfigType(value apiv1alpha1.LocalityConfigType) *LoadBalancerConfigApplyConfiguration {
	b.LocalityConfigType = &value
	return b
}

// WithUseHostnameForHashing sets the UseHostnameForHashing field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UseHostnameForHashing field is set to the value of the last call.
func (b *LoadBalancerConfigApplyConfiguration) WithUseHostnameForHashing(value bool) *LoadBalancerConfigApplyConfiguration {
	b.UseHostnameForHashing = &value
	return b
}

// WithCloseConnectionsOnHostSetChange sets the CloseConnectionsOnHostSetChange field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloseConnectionsOnHostSetChange field is set to the value of the last call.
func (b *LoadBalancerConfigApplyConfiguration) WithCloseConnectionsOnHostSetChange(value bool) *LoadBalancerConfigApplyConfiguration {
	b.CloseConnectionsOnHostSetChange = &value
	return b
}
